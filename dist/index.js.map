{"version":3,"sources":["src/icon.vue","src/button.vue","src/button-group.vue","index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAQA;AACA,EAAA,KAAA,EAAA,CAAA,MAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;;;;;;;;;;;;;;eACA;AACA,EAAA,UAAA,EAAA;AACA,cAAA;AADA,GADA;AAIA;AACA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA,EADA;AAEA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAFA;AAMA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,MAFA;AAGA,MAAA,SAHA,qBAGA,KAHA,EAGA;AAAA;AACA,eAAA,KAAA,KAAA,MAAA,IAAA,KAAA,KAAA,OAAA;AACA;AALA;AANA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCLA;AACA,EAAA,OADA,qBACA;AAAA;AAAA;AAAA;;AAAA;AACA,2BAAA,KAAA,GAAA,CAAA,QAAA,8HAAA;AAAA,YAAA,IAAA;AACA;AACA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,QAAA,CAAA,WAAA,EAAA;;AACA,YAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,OAAA,CAAA,IAAA,8HAAA,IAAA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;AACA;;AACA","file":"index.js","sourceRoot":"..","sourcesContent":["<template>\r\n    <svg class=\"g-icon\">\r\n        <use :xlink:href=\"`#i-${name}`\"></use>\r\n\r\n    </svg>\r\n    <!--注意icon图标用JS引进之后的挂载方式-->\r\n</template>\r\n<script>\r\n    export default {\r\n        props: ['name']\r\n    }\r\n</script>\r\n<style lang=\"scss\">\r\n    .g-icon {width: 1em; height: 1em; }\r\n</style>","<template>\r\n    <button class=\"g-button\" :class=\"{[`icon-${iconPosition}`]: true}\"  @click=\"$emit('click')\">\r\n        <g-icon class=\"icon\" v-if=\"icon && !loading\" :name=\"icon\"></g-icon>\r\n        <g-icon class=\"loading icon\" v-if=\"loading\" name=\"loading\"></g-icon>\r\n        <div class=\"content\">\r\n            <slot></slot>\r\n        </div>\r\n        <!--slot上不能加class-->\r\n    </button>\r\n</template>\r\n<script>\r\n    import Icon from './icon'\r\n    export default {\r\n        components: {\r\n            'g-icon': Icon\r\n        },\r\n        //props: ['icon', 'iconPosition']\r\n        //下面这种传参方法，将参数视为一个对象，可设置默认值和校验器\r\n        props: {\r\n            icon: {},\r\n            loading:{\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            iconPosition: {\r\n                type: String,\r\n                default: 'left',\r\n                validator (value) {     //参数的校验器，若用户输入的参数不是left或right，则返回false\r\n                    return value === 'left' || value === 'right'\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style lang=\"scss\">\r\n    @keyframes spin {\r\n        0% { transform: rotate(0deg); }\r\n        100% { transform: rotate(360deg); }\r\n    }\r\n    .g-button {\r\n        font-size: var(--font-size);\r\n        height: var(--button-height);\r\n        padding: 0 1em;\r\n        border-radius: var(--border-radius);\r\n        border: 1px solid var(--border-color);\r\n        background: var(--button-bg);\r\n        display: inline-flex; justify-content: center; align-items: center;\r\n        /*上面这两个用于按钮内部的元素居中，vertical-align 用于按钮与外部的东西对齐*/\r\n        /*加入 display: inline 之后，会出现两个按钮上下不对称的情况，此时加上 vertical-align: middle 可破之*/\r\n        vertical-align: middle;\r\n        &:hover {\r\n            border-color: var(--border-color-hover);\r\n        }\r\n        &:active {\r\n            background-color: var(--button-active-bg);\r\n        }\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n        > .content { order: 2; }     /*  >  这个符号表示递进关系*/\r\n        /*order 是在使用flex布局之后，用以改变元素顺序的，默认是0*/\r\n        > .icon { order: 1; margin-right: .1em; }\r\n        &.icon-right {\r\n            > .content {\r\n                order: 1;\r\n            }\r\n\r\n            > .icon {\r\n                order: 2;\r\n                margin-right: 0;\r\n                margin-left: .1em;\r\n            }\r\n        }\r\n        .loading{\r\n            animation: spin 2s infinite linear;\r\n        }\r\n    }\r\n</style>","<template>\r\n    <div class=\"g-button-group\">\r\n        <slot></slot>\r\n    </div>\r\n    <!--组件内，slot 不能作为根元素，所以加了div-->\r\n</template>\r\n<script>\r\n    export default {\r\n        mounted () {\r\n            for (let node of this.$el.children) {\r\n                //this.$children  只会输出三个 Vue component，因为这种方法只能找到Vue实例的Vue实例子元素\r\n                //this.$el.children 这种方法输出三个子元素，不一定是实例\r\n                let name = node.nodeName.toLowerCase()\r\n                if (name !== 'button') {\r\n                    console.warn(`g-button-group 的子元素应该全是 g-button，但是你写的是 ${name}`)\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style lang=\"scss\">\r\n    .g-button-group {\r\n        display: inline-flex;\r\n        vertical-align: middle;\r\n        > .g-button {\r\n            border-radius: 0;\r\n            margin-left: -1px;\r\n            /*margin-left: -1px; 这一句是为了使两个g-button之间的border由两个变成一个（因为有一个g-button的border被另一个g-button挡住了）*/\r\n            /*一开始是令一个g-button的border-right为none，但是这样以后可能会出bug*/\r\n            &:not(:first-child) {\r\n                margin-left: -1px;\r\n            }\r\n            &:first-child {\r\n                border-top-left-radius: var(--border-radius);\r\n                border-bottom-left-radius: var(--border-radius);\r\n            }\r\n            &:last-child {\r\n                border-top-right-radius: var(--border-radius);\r\n                border-bottom-right-radius: var(--border-radius);\r\n            }\r\n            &:hover {\r\n                position: relative;\r\n                z-index: 1;          /*加了这句之后，当悬浮在一个g-button上时，这个g-button被挡住的border会出现在上层*/\r\n            }\r\n        }\r\n    }\r\n</style>","import Button from './src/button'\r\nimport ButtonGroup from './src/button-group'\r\nimport Icon from './src/icon'\r\n\r\n\r\nexport {ButtonGroup, Button, Icon}"]}